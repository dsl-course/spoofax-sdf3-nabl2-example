module static-semantics

imports

  signatures/-
  
signature

	constructors
	
		INT: Type
		BOOL: Type
		FLOAT: Type
		STRING: Type
		OPTIONAL: Type -> Type
		EITHEROR : Type * Type -> Type

rules

	init ^ (s) := new s.

	[[ NumberTypeLiteral() ^ (s) : INT() ]].
	
	[[ ToggleTypeLiteral() ^ (s) : BOOL() ]].
	
	[[ TextTypeLiteral() ^ (s) : STRING() ]].
	
	[[ Number(_) ^ (s) : INT() ]].
	
	[[ String(_) ^ (s) : STRING() ]].
	
	[[ BoolConstTrue() ^ (s): BOOL() ]].
	
	[[ BoolConstFalse() ^ (s) : BOOL() ]].
	
	[[ VarDecl(t1, i1, e1) ^ (s) ]] :=
		[[ t1 ^ (s) : u ]],
		[[ e1 ^ (s) : t ]],
		u == t.
	
	[[ Addition(e1, e2) ^ (s) : t ]] :=
		[[ e1 ^ (s) : t ]],
		[[ e2 ^ (s) : t ]],
		t != BOOL().
			
	[[ Subtraction(e1, e2) ^ (s) : INT() ]] :=
		[[ e1 ^ (s) : INT() ]],
		[[ e2 ^ (s) : INT() ]].
		
	[[ Multiplication(e1, e2) ^ (s) : INT() ]] :=
		[[ e1 ^ (s) : INT() ]],
		[[ e2 ^ (s) : INT() ]].
	
	[[ Division(e1, e2) ^ (s) : FLOAT() ]] :=
		[[ e1 ^ (s) : INT() ]],
		[[ e2 ^ (s) : INT() ]].
		
		
	[[ Cast(e1, t1) ^ (s) : u ]] :=
		[[ t1 ^ (s) : u ]].
		
		
	[[ OptionalTypeLiteral(u1) ^ (s) : OPTIONAL(t) ]] :=
		[[ u1 ^ (s) : t ]].
		
	[[ OptionalJust(e1) ^ (s) : OPTIONAL(t) ]] :=
		[[ e1 ^ (s) : t ]].
		  
	[[ OptionalNothing() ^ (s) : OPTIONAL(_) ]].
	// Examples (copy-paste to `test.hel` and hover the mouse over `nothing` to see its type):
	// optional[text]/optional[number] a = left nothing;
	// optional[text]/optional[number] a = right nothing;
	
	
	
	[[ EitherOrTypeLiteral(u1, u2) ^ (s) : EITHEROR(t1, t2) ]] :=
		[[ u1 ^ (s) : t1 ]],
		[[ u2 ^ (s) : t2 ]].
		
	[[ EitherOrLeft(e1) ^ (s) : EITHEROR(t1, _) ]] :=
		[[ e1 ^ (s) : t1 ]].
		
	[[ EitherOrRight(e2) ^ (s) : EITHEROR(_, t2) ]] :=
		[[ e2 ^ (s) : t2 ]].
	

